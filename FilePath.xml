<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="api.xsl"?>
<api path=".">
	<extends>Path</extends>
	<class instance="filepath">FilePath</class>
	<construct>
		<form>var p = new FilePath(pathString);</form>
		<form>FilePath(pathString).doSomething();</form>
		<form>(new FilePath(pathString)).doSomething();</form>
		<form>filepath.resolve(pathString);</form>
	</construct>
	<constants>
		<call>
			<name>listSeparator</name>
			<overrides/>
			<form mode="get"/>
			<explain>
				<p>The separator used to join and split path lists like those used in the PATH Environment variable.</p>
				<p>Value for the FilePath system is OS dependent</p>
			</explain>
		</call>
		<call>
			<name>pathSeparator</name>
			<overrides/>
			<form mode="get"/>
			<explain>
				<p>The separator used to join together directory paths like foo/bar/baz.</p>
				<p>Value for the FilePath system is OS dependent</p>
			</explain>
		</call>
		<call>
			<name>pathSplitter</name>
			<overrides/>
			<form mode="get"/>
			<explain>
				<p>A regex or string used to split directory paths appart. This is separate from the pathSeparator so that a regex such as /[\/\\]/ can be used to split on both / and \ separated paths.</p>
				<p>Value for the FilePath system is <code>/[\/\\]/</code></p>
			</explain>
		</call>
	</constants>
	<properties>
		<call>
			<name status="pending">canonical</name>
			<form mode="get"/>
			<explain>
				<p>Note that the name may actually be changed to canonicalized instead.</p>
				<p>Returns a new path object which is normalized, absolute, and has any symlinks followed to the final name.</p>
			</explain>
		</call>
	</properties>
</api>
