
src/
    core/
         C Files
         monkeyscript.js
    module/
           _std/
              C Files
              _std.js
              String.js
              Array.js
              Object.js
           io/
              C Files

Compilation of the C portion of src/core/ only should result in the creation of a "monkeyscript" or "monkeyscript.exe" binary which follows the following conditions:
- The binary should be a full SpiderMonkey JS environment (static or shared).
- It must execute a "monkeyscript.js" file in the exact same directory as it.
- It must provide an object globally named "_native" containing the following:
 - binaryDirectory: The directory in which the binary and monkeyscript.js file reside.
 - libraryDirectory: The directory in which _std libraries are supposed to reside in.
 - currentWorkingDirectory: The working directory the binary was executed from. This should be setable and should change the working directory by doing so.
 - libraryExt: The extension .so or .dll which library files use.
 - getEnv(var): Returns the string form of an environment variable.
 - setEnv(var, val): Sets an environment variable using a string.
 - library(dll): 
 - exec(script): Runs the specified script file and returns the result of the last executed statement. Throws a ??? if the script cannot be found.
 - arguments: An object containing a list of the arguments passed to the binary and the number of them as length.
- For function calls made using `new fn()` arguments should contain a boolean `arguments.constructing` containing true.

Compilation of the C portion of src/module/_std should result in the creation of a "libmonkeyscript__std.so" or "libmonkeyscript__std.dll"
Compilation of the C portion of src/module/io should result in the creation of a "libmonkeyscript_io.so" or "libmonkeyscript_io.dll"


(function(_native) {
	delete global._native;
	
	_native._std = {};
	_native.library.call(_native._std, _native.libraryDirectory + '/libmonkeyscript__std' + _native.libraryExt);
	
	
})(_native);

