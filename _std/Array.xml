<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../api.xsl"?>
<api path="..">
	<class instance="['array']">Array</class>
	<construct>
		<form>["array", "of", "values"]</form>
		<form>new Array</form>
	</construct>
	<static>
		
	</static>
	<properties>
		
	</properties>
	<methods>
		<call>
			<name>remove</name>
			<form mode="call">item</form>
			<explain>
				Remove one item matching <var>item</item> from the array.
			</explain>
			<source>
Array.prototype.remove = function(item) {
	var i = this.indexOf(item);
	if( i !== -1 ) return this.splice(i, 1)[0];
	return undefined;
};
			</source>
		</call>
		<call>
			<name>has</name>
			<form mode="call">item</form>
			<explain>
				<p>Check if this array has a specific value and return a boolean indicating if it does.</p>
			</explain>
			<source>
Array.prototype.has = function(item) this.indexOf(item) !== -1;
			</source>
		</call>
		<call>
			<name>diff</name>
			<form mode="call">otherArray</form>
			<explain>
				<p>Compare this array with the other one and return a new array including a list of the items that are in this array and not the other.</p>
			</explain>
			<source>
Array.prototype.diff = function(otherArray) [ i for each( i in this ) if( !otherArray.has( i ) ) ];
			</source>
		</call>
		<call>
			<name>intersect</name>
			<form mode="call">otherArray</form>
			<explain>
				<p>Compare this array with the other one and return a new array including a list of the items that are inside both this array and the other.</p>
			</explain>
			<source>
Array.prototype.intersect = function(otherArray) [ i for each( i in this ) if( otherArray.has( i ) ) ];
			</source>
		</call>
		<call>
			<name>unique</name>
			<form mode="call"/>
			<explain>
				<p>Return a new array with duplicate items removed.</p>
			</explain>
			<source>
Array.prototype.unique = function() this.filter(function(item, i, arr) arr.indexOf(item) >= i);
		</call>
		<call>
			<name>clean</name>
			<form mode="call">strong=false</form>
			<explain>
				<p>Return a new array with undefined and null items removed.</p>
				<p>If true is passed to strong then empty strings are also removed.</p>
			</explain>
			<source>
Array.prototype.clean = function(strong) this.filter( function(i) i !== undefined && i !== null && ( !strong || i !== '' ) ));
		</call>
		<call>
			<name>shuffle</name>
			<form mode="call"/>
			<explain>
				<p>Resort the array with a randomized order.</p>
			</explain>
			<source>
Array.prototype.shuffle = function() this.sort( function() Math.random() > 0.5 ? 1 : -1 );
		</call>
		<call>
			<name>item</name>
			<form mode="call">index</form>
			<explain>
				<p>Return an item from an index in the array.</p>
				<p>This method is implemented merely for convenience of API's that are already using ArrayLike objects like HTMLCollection and NodeList.</p>
			</explain>
			<source>
Array.prototype.item = function(i) this[i];
		</call>
	</methods>
</api>
