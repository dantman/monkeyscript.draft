@module _std
@class Array

Description
	The Array is a representation of list data.
	
	There are a number of options for iteration over an Array.
	 * The recomended form `for each ( let item in arr ) { ... }` can be used safely inside MonkeyScrpt.
	 * Functionally #forEach can be used, as well as the #map, #filter, #reduce, #reduceRight, #every, and #some functions iterate for special purposes.
	 * The classic `for ( let i = 0; i < arr.length; i++ ) arr[i];` can be used
	 * Another posibility is `for ( let item, list = arr.slice(); item = list.shift(); ) item;

arr[index];
arr.item(index);
	@param index The index number of the array item
	Return the item at the specified `index`.

arr.length;
	The number of items inside of the array.

arr.has(item);
	@param item The otem to check for.
	Check and see if `item` can be found inside of `arr`.

arr.remove(item, [max=Infinity]);
	@param item The item to remove
	@param max  An optional limit to how many to remove
	Remove items from `arr` which match `item`. By default this will remove
	all matching items and return the number of items remove. You may optionally
	specify a `max` limit to how many may be removed.

arr.clean([strong=false]);
	@param strong Also clean out empty strings
	Return an array with `undefined` and `null` items removed. If you pass true
	to the function it will also remove empty strings.

arr.pop();
	Pop an item off the end of an array. The item is returned as the return value.

arr.push(item, ...);
	@param item An item to push onto the array.
	Pushes one or more items onto the end of an array. The new length of the array
	is returned as the return value.

arr.pushArray(arr);
	@param arr An array of items to push onto the array.
	Pushes all the items inside of an array onto the end of the current array.
	The length of the array is returned as the return value.
	-- Source
	Array.prototype.pushArray = function(arr) this.push.apply( this, arr );
	----

arr.shift();
	Shift an item off the start of an array. The item is returned as the return value.

arr.unshift(item, ...);
	@param item An item to unshift onto the array.
	Unshifts one or more items onto the start of an array. The new length of the array
	is returned as the return value.

arr.unshiftArray(arr);
	@param arr An array of items to unshift onto the array.
	Unshifts all the items inside of an array onto the start of the current array.
	The length of the array is returned as the return value.
	-- Source
	Array.prototype.unshiftArray = function(arr) this.unshift.apply( this, arr );
	----

arr.slice

arr.splice

arr.diff(other);
	@param other The other array to compare with.
	Compare two arrays and return a list of items in `arr` that are not inside of `other`.

arr.intersect(other);
	@param other The other array to compare with.
	Compare two arrays and return a list of items inside of both arrays.

arr.unique();
	@debate Should this modify instead of returning a copy? Which is more common, reasonable?
	Return a copy of `arr` with all duplicates removed.

arr.flat();
	@TBD Should this be flattened, flaten?
	Flatten an array of arrays down to a single level array and return it.
	-- Example
	> [['foo', 'bar'], ['bing', 'bang', 'baz']].flat()
	['foo', 'bar', 'bing', 'bang', 'baz']
	----

arr.shuffle();
	Resort the array to have a random order.


