@class Blob

Description
	The Blob is a representation of binary data. It is nearly parallel in API
	to the String. The primary difference is rather than 16-bit character data
	the Blob stores 8-bit bytes. Like strings the blobs are immutable.

blob.length;
	@readonly
	The number of bytes inside the blob.

blob.slice(offset, length);
	@param offset The number of bytes from the start of the blob to offset.
	@param length The number of bytes from the start off the offset to extract.
	Extracts a section of the blob and returns a new blob containing it as the contents.

blob.byteAt(index);
blob[index];
	@param index The index of the byte to extract.
	Extracts a single byte from the blob and returns a new blob object containing only it.

blob.concat(otherBlob, ...);
	@param otherBlob The blob to put at the end of the current blob.
	Combines the content of multiple blobs together and returns a new blob.

blob.indexOf(blob, offset=0);
	@param blob   The blob to look for within the current blob.
	@param offset The number of bytes from the start of the blob to start at.
	Returns the index within the calling blob object of the first occurrence of
	the specified value, or -1 if not found.

blob.lastIndexOf(blob, offset=0);
	@param blob   The blob to look for within the current blob.
	@param offset The number of bytes from the start of the blob to start at.
	Returns the index within the calling blob object of the last occurrence of
	the specified value, or -1 if not found.

blob.charAt(index, encoding=UTF-16);
	@param index The index of the byte to extract.
	@param encoding The character encoding used inside the binary data.
	Extract a single character from a single byte within a blob.
	`encoding` defines the string encoding of the blob which will be used to
	convert the blob into the native UTF-16 data.
	This function is merely provided for completeness with the string api,
	it's recommended to read multiple bytes at once using #stringAt.

blob.integerAt(offset, size, signed=false, networkEndian=false);
	@param offset        The number of bytes from the start of the blob to start at.
	@param size          The byte size of the integer to extract.
	@param signed        Is the integer to extract signed or not.
	@param networkEndian Is the integer to extract networkEndian or not.
	Extract an integer from a blob. `size` defines the byte size of the integer.
	`signed` and `networkEndian` optionally define if the integer is signed and if
	the integer is `networkEndian` so it may be extracted as the correct number value.

blob.floatAt(offset, size);
	@param offset The number of bytes from the start of the blob to start at.
	@param size   The byte size of the floating point number to extract.
	              This may only be the number for 4 (float) or 8 (double).
	Extract a float from a blob. `size` defines the byte size of the float which
	may only be 4 (for floats) or 8 (for doubles).

blob.stringAt(offset, size, encoding=UTF-16);
	@alias blob.substr
	@param offset   The number of bytes from the start of the blob to start at.
	@param size     The byte size of the string to extract.
	@param encoding The character encoding used inside the binary data.
	Extract a string from a blob. `size` defines the byte size of the string.
	`encoding` defines the string encoding of the blob which will be used to
	convert the blob into the native UTF-16 data.






