@module _std
@class Date

// Get the actual ISO info to use when documenting.
Date.parseISO(dateString);
	Parse an ISO 8601 timestamp into a numerical unix timestamp.
	-- Source
	// ToDo: Handle combined dates (ie: YYYYMMDD as well as YYYY-MM-DD, note that YYYYMM is not valid)
	// ToDo: Allow trailing pieces to be ommitted
	// ToDo: Support ordinal dates
	// ToDo: Parse Z and [-+](\d{2})(?::?(\d{2})) timezones
	Date.parseISO = function(str) {
		var m = /(\d{4})-(\d\d?)-(\d\d?)(?:[ T](\d\d?):(\d\d?)(?::(\d\d?))?)?/.exec(str);
		m.shift();
		return Date.UTC.apply(Date, m);
	};
	----

Date.fromISO(dateString);
	Create a new date object using an ISO 8601 timestamp.
	Date.fromISO = function(str) new Date(this.parseISO(str));

date.toISOTimeString();
	Create an ISO 8601 formatted string containing the UTC time from the date object.
	-- Source
	Date.prototype.toISOTimeString = function() [this.getUTCHours().pad(2), this.getUTCMinutes().pad(2), this.getUTCSeconds().pad(2)].join(":") + 'Z';
	----

date.toISODateString();
	Create an ISO 8601 formatted string containing the UTC date from the date object.
	-- Source
	Date.prototype.toISODateString = function() [this.getUTCFullYear(), (this.getUTCMonth()+1).pad(2), this.getUTCDate().pad(2)].join("-");
	----

date.toISOString(strict=false);
	@param strict Use strict ISO standards mode rather than common output mode (output a T instead of a space as the separator)
	Create an ISO 8601 formatted string containing the UTC date and time from the date object.
	-- Source
	Date.prototype.toISOString = function(strict) [this.toISODateString(), strict?'T':' ', this.toISOTimeString()].join('');
	----

