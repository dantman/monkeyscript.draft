@module io
@class File

Description
	The File class handles access to files. Think of it as "I'm a file" in a
	strong sense. An instance is NOT a file handle, but more of an assertion
	that /path/to/something is a reference to a location of the filesystem.
	A File instance is used for opening up streams for reading/writing
	checking information about the file, and making strong actions on it like
	moving, renaming, or deleting.
	
	Use `new File(pathString)` if you know that you are dealing with a proper
	path to something on the filesystem. If various types of normalisation like
	safe handling of ~ cross systems or fixing of /'s to \'s on windows systems,
	or any sort of path manipulation is in order before creating a file instance
	then use `new FilePath(pathString)` and use the [[FilePath]]'s .file getter to
	get a file instance. File is safe for use on a directory for normal actions
	like moving or checking stat info. [[Directory]] is for use when you specifically
	want to deal with the list of stuff inside the directory rather than information
	about the directory itself.
	
	The absolute (not canonical) path to a file is defined when the file object is instanced.
	This means that if you use `var f = new File('./foo.txt');` even if you change
	the current working directory `f` will still refer to the same file, and not
	a file inside the new current working directory.

File.open(path, openFlags, [encoding=File.systemEncoding], [access], [block]);
File.open(openFlags, options, [block]);
file.open(openFlags, [encoding=File.systemEncoding], [access], [block]);
file.open(options, [block]);
	@param openFlags A string or bitfield indicating what mode to open the file in 
	@param access    An octal or object indicating permissions to open a file with if it is created (only for *nix systems)
	@param encoding  The type of encoding to open the file with
	@param options   An object with key/value paris used in place of the openFlags, encoding, and access params
	@param block     A block function to call in the context of the opened stream
	Open a [[Stream]] for reading/writing to/from the file.
	 * `openFlags` is a bitfield of flags constants or a string with rwa+tb flags indicating how to open the file.
	 * `encoding` or an encoding key in the options object is an encoding to use when reading the file.
	 * `access` or an access key in the options object is an optional set of permissions to create the file with on *nix platforms if creating the file when opening it ('x' and File.NOCREATE are not specified).
	 * If 'b' is used in flags, the flags bitfield contains File.BINARY, the oprions object has the binary key set and not the text key set (having both set is an error) or `encoding.lc === 'binary'` then the file is opened for binary reading (.read returns blobs)
	 * If 't' is used in flags, or a 'b' is absent from the string, File.BINARY is not used, the options object does not have the binary key set, and `encoding.lc !== 'binary'` then the file is opened for text reading (.read returns strings)
	 * If 'r' is used in flags, File.READ is used in the bitfield, or the read key is set in the options object the file is opened for reading.
	 * If 'w' is used in flags, File.WRITE is used in the bitfield, or the write key is set in the options object the file is opened for writing.
	 * If 'x' is used in flags, File.NOCREATE is used in the bitfield, or the create key is explicitly set to false the file is only opened if the file does not exist. These imply 'w' and File.WRITE;
	 * If 'a' is used in flags, File.APPEND is used in the bitfield, or the append key is set in the options object writing is always done from the end of the file. These imply 'w' and File.WRITE;
	 * If '+' is used in flags, File.NOTRUNCATE is used in the bitfield, or the truncate key is explicitly set to false in the options object when opened for writing the file is not truncated when opened.
	 * If 's' is used in flags, File.SYNC is used in the bitfileld, or the sync key is set in the options object when opened writing to the file will wait for file data and status to be physically updated.
	
	If a `block` function is given then the stream will only be open within the context
	of that function, once the function finishes then the stream will be closed.
	The callback is called with `this` being the file object and the stream passed
	as the first argument to the function.
	-- Example
	var f = new File('/safe/path/to/file.txt');
	var content = f.open('r').read();
	content.reverse();
	f.open('w').write(content);
	----
	-- Example
	var f = new File('/safe/path/to/file.txt');
	var content = false;
	f.open('r', function(s) {
		content = s.read();
	});
	content; // file's contents
	----
	-- Source explanation of mode and options
	function open() {
		var args = Array.slice(arguments);
		var options = {
			read: false,
			write: false,
			encoding: false,
			access: false,
			create: true
			truncate: true,
			sync: false
		};
		var block;
		if( typeof args[0] === 'string' ) {
			var mode = args.shift();
			if( typeof args[0] === 'string' && !/([r-][w-][x-]){3}/.test(args[0]) )
				var encoding = args.shift();
			if( ['string', 'number'].has(typeof args[0]) )
				var access = args.shift();
			options.encoding = encoding;
			options.access = access;
			if( mode.contains('r') ) options.read = true;
			if( mode.contains('w') ) options.write = true;
			if( mode.contains('a') ) { options.write = options.append = true; }
			if( mode.contains('x') ) { options.write = true; options.create = false; }
			if( mode.contains('+') ) options.truncate = false;
			if( mode.contains('s') ) options.sync = true;
			if( mode.contains('b') || encoding === 'binary' ) options.binary = true;
			if( mode.contains('t') ) options.text = true;
		} else {
			Object.merge(options, args.shift());
		}
		if( options.append ) options.write = true;
		if( options.text && options.binary )
			throw TypeError("Text and Binary modes cannot be enabled at the same time");
		if( options.binary ) options.encoding = 'binary';
		if( !options.write ) options.read;
		if( typeof args[0] === 'function' )
			block = args.shift();
		// ... //
	}
	----

file.exists;
file.isReadable;
file.isWritable;
	@impl See PR_Access
	Check the file for existance, readability, or writability. readability and
	writability imply existance.

file.exists = false;
file.content = undefined;
file.remove();
	Delete a file.
	
	For convenience .unlink() .rm() and ['delete']() aliases are provided for .remove();
	
	The `file.exists = false;` and `file.content = undefined;` forms will throw
	an IOError if the deletion fails while the `file.remove();` form returns a
	boolean indicating if the deletion was successful or failed.
	See #rename for an example of the differences in usage.

file.size;
	The number of bytes inside of a file, or undefined if nonexistent.

file.lastModified;
	Return a date object containing the date and time that the file was last
	modified at.

file.lastModified = date;
file.touch([date]);
	@param date The date and time to set last modified time as.
	Update the last modified time of the file. A `date` may be specified as a
	[[Date]] object or a unix timestamp as a [[Number]].
	
	It's recomended to call touch() without arguments if you are merely trying
	to update the last modified time of the file to the current point in time.

file.name;
	Return a string containing the name of the file on the system.

file.name = name;
file.rename(name);
	@param name The new name for the file
	Rename (change just the filename) of a file. This only changes the name of
	the file within it's own directory, it does not allow movement of the file
	to another directory.
	
	The `file.name = name;` form will throw an [[IOError]] if the renaming fails
	while the `file.rename(name);` form returns a boolean indicating if the
	rename was successful or failed.
	
	Both forms will change the name and path of the file instance so that it
	points to the new location of the file.
	-- Example
	var f = new File('/path/to/example.txt');
	
	// Catch any IOError you run into (ie: verbose, easy to handle sections of code which may output IOErrors from multiple locations).
	try {
		f.name = 'foo.txt';
		print('Renamed example.txt to foo.txt');
	} catch( e if e instanceof IOError ) {
		print('Failed to rename example.txt to foo.txt');
		exit;
	}
	
	// Throw your own custom errors (ie: simple diy).
	if(!f.rename('bar.txt')) throw IOError('Failed to rename example.txt to bar.txt');
	
	// Just ignore errors (ie: ignorant and lazy)
	f.rename('baz.txt');
	f.open('r').read(); // Will work whether the previous rename worked or failed since f will still refer to the correct file.
	
	// Let the program die on it's own if there is a big issue (ie: fatal but lazy)
	f.name = 'example.txt';
	----

file.path;
	Return a [[FilePath]] object containing the absolute path to the file.

file.path = path;
file.move(path);
	@alias mv
	@param path The new path for the file this may be a string path, a [[FilePath]], [[File]], or [[Directory]] instance.
	Move (change the path; ie: name and/or directory) of a file.
	This can be used to change the name of and/or move the file into a different directory.
	 * If path is a string ending in / or the path is an existing directory then the file is just moved into the directory.
	 * If path is a string not ending in / and it doesn't exist as a directory then the file is renamed and moved if the directory is different.
	 * If path is a Directory object then the file is moved into that directory.
	 * If path is a File object then the file is renamed to the name of that file and moved into it's directory.
	
	The `file.path = path;` form will throw an [[IOError]] if the moving fails
	while the `file.move(name);` form returns a boolean indicating if the move was
	successful or failed. See #rename for an example of the differences in usage.
	
	Both forms will change the name and path of the file instance so that it
	points to the new location of the file.
	-- Example
	var f = new File('/path/to/example.txt');
	
	f.move('mat/'); // move to /current/working/directory/mat/example.txt
	f.move('mat');  // if mat is a directory move to /current/working/directory/mat/example.txt
	f.move('mat.txt'); // mat.txt is likely not a directory, move to /current/working/directory/mat/mat.txt
	f.move(new Directory('/foo/bar')); // move to /foo/bar/example.txt
	f.move(new File('/foo/bar.txt'));  // move to /foo/bar.txt
	----

file.copy(path);
file.copyTo(path);
	@alias cp
	@param path The new path for the file this may be a string path, a [[FilePath]], [[File]], or [[Directory]] instance.
	Copy the contents of this file to another path. `path` shares the same semantics
	as with #move cept it copies except moves.

file.copyFrom(path);
	@param path The path to copy the file from, this may be a string path, a [[FilePath]], [[File]], or [[Directory]] instance.
	See #copyTo. This does the same except copies from `path` into the current file instance.

