@module _jake
@func

Description
	Jake is MonkeyScript's task running system. The ideas come from make, rake,
	and the various other systems for individual programming languages.
	
	When Jake is run it will search the current working directory for a `Jake`
	or `Jake.js` file to use to define tasks.
	
	Tasks are defined using #task() and you can use #group() to group tasks together.
	Using a group will namespace nested tasks with the name of the group.
	Identifiers are spearated by a . so writing the task 'bar' inside the group
	'foo' to create `jake foo.bar` can also be accomplished by writing a task
	called 'foo.bar'.
	-- Example
	task('foo.bar', function(options) {
		// ... //
	});
	
	group('foo', function() {
		task('baz', function(options) {
			// ... //
		});
	});
	----
	This example exports the tasks `foo.bar` and `foo.baz`.

task(name, [depends], fn);
	@param name    The name of the task being created
	@param depends A list of other tasks which this one depends on
	@param fn      The callback function
	Create a named task. The name of the task is defined by `name`, as well
	if this is inside of a #group then the name of the group will be added to the
	start of the task's name along with a . to separate them.
	
	The callback for the task is considered the task itself. If the program was
	called to run the task then it will be called. The callback recieves a single
	argument to it which contains an object of the options that were passed to
	jake when it was invoked.

group(name, fn);
	@param name The name of the group being created
	@param fn   The callback function
	Create a named group. The name of the group is defined by `name`, as well
	if this is inside of another #group then the name of that other group will
	be added to the start of this group's name along with a . to separate them.
	
	The callback for the group is considered the group itself. For optimization
	purposes, as well as giving groups the ability to define common resources
	to namespaced tasks a group will only be executed if the name of the task
	is inside the group and the task cannot be found outside of the group, or
	if jake is building a list of tasks inside of the taskfile.
	
	The callback recieves a single argument to it. This will be falsy if Jake is
	building a list of tasks, and truthy if Jake is trying to find a task to run
	and it happends to be inside of the group. This way groups can define some
	sort of special common resource for their tasks but be safe from breaking
	the ability to build a list of tasks in the taskfile. Please do not directly
	check for `arg === true`, simply use `if(arg)` or `if(arg)` as it's not guaranteed
	that the argument will be `true` forever, only truthy. It's possible we may
	replace the argument with the options object when running a task.

