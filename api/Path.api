@module misc.path
@class Path

Description
	Path is a generic class for the handling of paths. Special path systems can
	be created from it and most of the time that is the intent of it's use.
	
	Path is used as the base for a number of path systems like [[URLPath]] which is
	used in [[URL]]s and [[FilePath]] which is used to handle paths on the filesystem.

new Path(pathString);
	@param pathString The string or another path object to convert into the path.
	Create a path object out of `path`.

Path.newPathSystem(options);
	Creates a new path system like [[FilePath]] or [[URLPath]] based on the
	options passed to it.
	
	The options array may contain keys like listSeparator, base, etc... which
	will be used to define new constants for the created path system.

Path.listSeparator;
	The token used when splitting and joining path lists like the PATH env var.
	On Path itself this is always ':', subsystems may define their own.

Path.pathSeparator;
	The token or regex used when joining paths together.
	On Path itself this is always '/', subsystems may define their own.

Path.pathSplitter;
	The token or regex used when splitting paths appart.
	On Path itself this is always '/', subsystems may define their own.

Path.base;
	A Path instance which forms the base path. The base path is used whenever
	making a relative url absolute.

Path.home;
	A Path instance which forms the home path. On Path itself this is undefined
	as normal paths do not have home directories. However sub path systems may
	set one to enable home directory features.

path.join(pathString);
	@param pathString The string or other path object to join onto this path
	Join another path onto the end of this path. When joining ./ and ../s are
	not followed but merely joined onto the path.
	 * Joining bar/baz onto /foo will return /foo/bar/baz
	 * Joining bar/./baz onto /foo will return /foo/bar/./baz
	 * Joining bar/../baz onto /foo will return /foo/bar/../baz
	 * Joining bar/baz onto /foo/./../usr will return /foo/./../usr/bar/baz
	 * Joining bar/./baz onto /foo/./../usr will return /foo/./../usr/bar/./baz
	 * Joining bar/../baz onto /foo/./../usr will return /foo/./../usr/bar/../baz
	 * Resolving ../ onto /foo/bar/baz will return /foo/bar/baz/../
	 * Joining /root onto /foo will return /root
	 * Joining ~/Documents onto /foo will return ~/Documents if the system has a home

path.resolve(pathString);
	@param pathString The string or other path object to resolve onto this path
	Resolve another path onto the end of this path. When resolving ./ and ../s are
	followed, but the original path itself is not normalized.
	 * Resolving bar/baz onto /foo will return /foo/bar/baz
	 * Resolving bar/./baz onto /foo will return /foo/bar/baz
	 * Resolving bar/../baz onto /foo will return /foo/baz
	 * Resolving bar/baz onto /foo/./../usr will return /foo/./../usr/bar/baz
	 * Resolving bar/./baz onto /foo/./../usr will return /foo/./../usr/bar/baz
	 * Resolving bar/../baz onto /foo/./../usr will return /foo/./../usr/baz
	 * Resolving ../ onto /foo/bar/baz will return /foo/bar
	 * Resolving /root onto /foo will return /root
	 * Resolving ~/Documents onto /foo will return ~/Documents if the system has a home

path.normal;
	@debate normal or normalized
	Returns a version of the path object where all /./'s and /../ have been
	normalized. If a ../ is encountered that tries to go past the root (/) of
	the drive it is ignored unless #hardErrors is set on the path system.

path.absolute;
	Returns a version of the path object that is #normal and has been resolved
	onto the #cwd and is thus an absolute path.

path.relativeTo(pathString);
	@param pathString The string or other path object to resolve relative to
	Returns a new path object which has been modified to be relative to the
	passed pathString. For example if you resolve `/foo` onto `/foo/bar/baz.txt`
	then the resulting path will be `bar/baz.txt`.

path.parent;
	Returns a new path string with the current path's parent.
	 * /foo/bar/baz.txt will return /foo/bar/
	 * /foo/bar/ will return /foo/
	 * /foo/bar will return /foo/
	If .parent attempts to go past the document root it'll be ignored and / will
	be returned unless #hardErrors is set on the path system.

path.name;
	Returns a string of the final name portion of the path.
	 * /foo/bar/baz.txt will return "baz.txt"
	 * /foo/bar/ will return "bar"
	 * /foo/bar will return "bar"

path.extension;
	Returns the extension of a filename if any.
	 * /foo/bar/baz.txt will return "txt"

path.basename([extension]);
	@param extension The file extension to trim out if it matches the one on the filename
	Returns the #name of the file. If the extension is supplied and that matches
	the #extension of the file name it is stripped out of the name.

