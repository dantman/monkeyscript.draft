<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../api.xsl"?>
<api path="..">
	<class instance="streamio">StreamIO</class>
	<namespace>io</namespace>
	<construct>
		<explain>
			<p>StreamIO is a mixin object, it defines native calls for io streams that use the interface, and it's methods are imported into objects when a stream is opened.</p>
			<p>Normally when you call open on an instance of something such as the <link to="io/File.xml">File</link> class it will import the StreamIO calls and give access to the natively implemented calls.</p>
		</explain>
	</construct>
	<constants>
		<call>
			<name>systemlineEnding</name>
			<form mode="get"/>
			<explain>
				<p>The string (OS Dependant) which signifies a line ending on the system. This will be something like "\n", "\r", or "\r\n";</p>
			</explain>
		</call>
		<call>
			<name>universalLineEnding</name>
			<form mode="get"/>
			<explain>
				<p>A regex that universally matches line endings on all systems. <code>/(\r\n|\n\r|\n|\r)/</code></p>
			</explain>
		</call>
	</constants>
	<properties>
		<call implementation="native">
			<name>available</name>
			<explain>
			  <p>The number of bytes currently available in the stream to be read.</p>
			</explain>
		</call>
		<call implementation="native">
			<name>isReadable</name>
			<form mode="get"/>
			<explain>
				<p>When checked returns a boolean indicating whether or not the stream is ready to be read from.</p>
			</explain>
		</call>
		<call implementation="native">
			<overrides/>
			<name>isWritable</name>
			<form mode="get"/>
			<explain>
				<p>When checked returns a boolean indicating whether or not the stream is ready to be written to.</p>
			</explain>
		</call>
	</properties>
	<methods>
		<call implementation="native">
			<name>read</name>
			<form mode="call"/>
			<form mode="call">length</form>
			<explain>
				<p>Read data in from the stream. If a <var>length</var> is passed then that many bytes are read in from the stream.</p>
				<p>If you omit the length read will read all the available bytes in the stream as defined by <code link="#properties-available">streamio.available</code>.</p>
			</explain>
		</call>
		<call implementation="native">
			<name>readTo</name>
			<form mode="call">end</form>
			<form mode="call">end, length</form>
			<explain>
				<p>Read data in from the stream until an end string or regex is matched or a limit specified by a passed <var>length</var> is hit.</p>
			</explain>
		</call>
		<call implementation="native">
			<name>readLine</name>
			<form mode="call"/>
			<explain>
				<p>Only works for a text mode stream.</p>
				<p>Read data in from the stream until a line endingis matched.</p>
				<p>"lineEnding" is matched universally, on all systems a match to the universal line ending is considered to be a line ending.</p>
			</explain>
		</call>
		<call implementation="native">
			<name>write</name>
			<form mode="call">data</form>
			<form mode="call">data, length</form>
			<explain>
				<p>Write data to the stream. If a <var>length</var> is passed then the data is resticted to a number of bytes and any extras are discarded.</p>
			</explain>
		</call>
		<call implementation="js">
			<name>writeLine</name>
			<form mode="call">string</form>
			<explain>
				<p>Only works for a text mode stream.</p>
				<p>Write data into a stream and write a <code>StreamIO.lineEnding</code> into the stream.</p>
			</explain>
		</call>
		<call implementation="native">
			<name>seek</name>
			<form mode="call">length</form>
			<explain>
				<p>Seek past a number of bytes in the stream ignoring them.</p>
			</explain>
		</call>
		<call implementation="native">
			<name>close</name>
			<form mode="call"/>
			<explain>
				<p>Close a stream object.</p>
			</explain>
		</call>
	</methods>
</api>
